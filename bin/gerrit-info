#!/bin/bash

# colors
RED="\033[0;31m"
YELLOW="\033[1;33m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"
BOLD="\033[1m"
UNDERLINE="\033[4m"

die() {
    echo -e "${RED}${@}${NO_COLOR}"
    exit 1
}

warn() {
    echo -e "${YELLOW}${@}${NO_COLOR}"
}

good() {
    echo -e "${GREEN}${@}${NO_COLOR}"
}

is_integer() {
    [[ "$1" = [0-9]* ]] > /dev/null 2>&1
    return $?
}

ask_yes_no() {
    if [ "" = "$2" ] ; then
        local msg="$1 [y/n]: "
    else
        local msg="$1 (y/n) [$2]: "
    fi
    while true; do
        read -p "$msg" choice
            case ${choice:-$2} in
                y|Y|yes|Yes|YES)
                    return 0
                    ;;
                n|no|No|NO)
                    return 1
                    ;;
                *)
                    warn "Please choose either y or n"
                    ;;
            esac
    done
}

# Check commands
GIT=$(which git)
if [[ -z "$GIT" ]]; then
    die "git is not installed"
fi

SSH=$(which ssh)
if [[ -z "$SSH" ]]; then
    die "ssh is not installed"
fi

git() {
    if [[ "$verbose" = true ]]; then
        echo -e "+ ${GREEN}git $@${NO_COLOR}"
    fi

    if [[ "$run" = true ]]; then
        $GIT $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
        return ${PIPESTATUS[0]}
    fi
}

check_git_dir() {
	GIT_DIR=$($GIT rev-parse --git-dir 2>/dev/null)
	if [[ -z "$GIT_DIR" ]]; then
		die "$this can only be run from a git repository."
	fi
}

git_set_current() {
	CURRENT=$($GIT symbolic-ref -q HEAD || $GIT rev-parse HEAD)
	CURRENT=${CURRENT#refs/heads/}
}

ssh() {
    if [[ "$verbose" = true ]]; then
        echo -e "+ ${GREEN}ssh $@${NO_COLOR}"
    fi

    if [[ "$run" = true ]]; then
        $SSH $@ 2>&1 | tee /dev/tty > $GIT_OUTPUT_FILE
        return ${PIPESTATUS[0]}
    fi
}

is_review_branch() {
    local branch=$1
    if [[ "${branch:0:1}" = "r" ]]; then
        local change=${branch:1}
        if is_integer $change; then
            return 0
        fi
    fi
    return 1
}

getGerritServerAndProject() {
    if [ "" != "${host}" ] ; then
        return
    fi

    local url_line=$($GIT remote show -n origin | grep "Push  URL: " | head -n1)
    local host_and_project=${url_line# *URL: }

    host=''
    project=''
    port=''

    if [[ "$host_and_project" =~ "ssh://" ]]; then
      local host_and_project=${host_and_project#ssh://}
      local host_and_port=${host_and_project%%/*}

      if [[ "$host_and_port" =~ ":" ]]; then
        host=${host_and_port%:*}
        port=${host_and_port#*:}
      else
        host=${host_and_port}
        port=""
      fi
      project=${host_and_project#*/}
    else
      host=${host_and_project%:*}
      project=${host_and_project#*:}
      port=""
    fi

    project=${project%.git}

    port=${port%/*}
    if [[ ! -z "$port" ]]; then
      port="-p $port"
    fi
}

executeGerritCommand() {
    getGerritServerAndProject
    gerrit_command_result=$($SSH $port $host gerrit $@)
}

check_for_valid_change() {
    local env_change="$CHANGE" user_change="$1" selected_change="" ok=""

    if [[ -n "$user_change" ]] ; then
        if is_integer "$user_change" ; then
            selected_change="$user_change"
        else
            ok="n"
        fi
    elif is_integer "$env_change" ; then
        selected_change="$env_change"
    else
        ok="n"
    fi

    if [[ "$ok" = "n" ]]; then
        die "Your must specify an the change number as an integer in the first parameter or in \$CHANGE (which may be populated from the branch name)."
    fi

		CHANGE=$selected_change
}
